<?php
/**
 * Created by PhpStorm.
 * User: Pablo LlinÃ¡s
 * Date: 20/05/14
 * Time: 11:25
 */

class ClipitPerformancePalette{
    /**
     * @const string Elgg entity SUBTYPE for this class
     */
    const SUBTYPE = "ClipitPerformancePalette";

    public $performance_items = array();

    /**
     * Constructor
     *
     * @throws APIException
     */
    function __construct(){
        global $CONFIG;
        if(empty($CONFIG->performance_palette_id)){
            $elgg_entity = new ElggObject();
            $elgg_entity->set("name", "Performance Palette");
            $CONFIG->performance_palette_id = (int)$elgg_entity->save();
        } else{
            $elgg_entity = new ElggObject((int)$CONFIG->performance_palette_id);
        }
        $this->id = (int)$elgg_entity->get("guid");
        $this->name = (string)$elgg_entity->get("name");
        $this->owner_id = (int)$elgg_entity->getOwnerGUID();
        $this->time_created = (int)$elgg_entity->getTimeCreated();
        $this->performance_items = (array)$elgg_entity->get("performance_items");
        return $this->id;
    }

    /**
     * Saves this instance into the system.
     *
     * @return bool|int Returns id of saved instance, or false if error.
     */
    protected function save(){
        global $CONFIG;
        if(empty($CONFIG->performance_palette_id)){
            return null;
        } else{
            $elgg_entity = new ElggObject($CONFIG->performance_palette_id);
        }
        $elgg_entity->set("performance_items", (array)$this->performance_items);
        return $elgg_entity->save();
    }

    static function get_performance_palette(){
        return new static();
    }

    static function remove_all_items(){
        $performance_palette = new static();
        ClipitPerformanceItem::delete_by_id($performance_palette->performance_items);
        $performance_palette->performance_items = array();
        return $performance_palette->save();
    }

    static function set_performance_items($performance_items){
        static::remove_all_items();
        return static::add_performance_items($performance_items);
    }

    static function add_performance_items($performance_items){
        $performance_palette = new static();
        $performance_palette->performance_items = array_merge($performance_palette->performance_items, $performance_items);
        return $performance_palette->save();
    }

} 

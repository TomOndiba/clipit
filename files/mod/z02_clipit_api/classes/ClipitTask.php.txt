<?php
/**
 * ClipIt - JuxtaLearn Web Space
 * PHP version:     >= 5.2
 * Creation date:   2013-10-10
 * Last update:     $Date$
 * @author          Pablo Llin√°s Arnaiz <pebs74@gmail.com>, URJC JuxtaLearn Team
 * @version         $Version$
 * @link            http://www.juxtalearn.eu
 * @license         GNU Affero General Public License v3
 * @package         ClipIt
 * @subpackage      clipit_api
 */

/**
 * Class ClipitTask
 */
class ClipitTask extends UBItem{
    /**
     * @const string Elgg entity SUBTYPE for this class
     */
    const SUBTYPE = "ClipitTask";

    // Task types
    const TYPE_QUIZ_ANSWER = "quiz_answer";
    const TYPE_STORYBOARD_UPLOAD = "storyboard_upload";
    const TYPE_STORYBOARD_FEEDBACK = "storyboard_feedback";
    const TYPE_VIDEO_UPLOAD = "video_upload";
    const TYPE_VIDEO_FEEDBACK = "video_feedback";
    const TYPE_OTHER = "other";

    const REL_TASK_STORYBOARD = "task-storyboard";
    const REL_TASK_VIDEO = "task-video";
    const REL_TASK_FILE = "task-file";

    public $task_type = "";
    public $start = 0;
    public $end = 0;

    public $storyboard_array = array();
    public $video_array = array();
    public $file_array = array();

    /**
     * Loads object parameters stored in Elgg
     *
     * @param ElggEntity $elgg_entity Elgg Object to load parameters from.
     */
    protected function load_from_elgg($elgg_entity){
        parent::load_from_elgg($elgg_entity);
        $save_after_load = false;
        $this->task_type = (string)$elgg_entity->get("task_type");
        $this->start = (int)$elgg_entity->get("start");
        $this->end = (int)$elgg_entity->get("end");
        if($this->end == 0){
            $activity_id = static::get_activity($this->id);
            if(!empty($activity_id)){
                $prop_value_array = (int) ClipitActivity::get_properties($activity_id, array("deadline"));
                $this->end = $prop_value_array["deadline"];
            }
        }
        $this->storyboard_array = static::get_storyboards((int)$this->id);
        $this->video_array = static::get_videos($this->id);
        $this->file_array = static::get_files($this->id);
    }

    /**
     * Copy $this object parameters into an Elgg entity.
     *
     * @param ElggEntity $elgg_entity Elgg object instance to save $this to
     */
    protected function copy_to_elgg($elgg_entity){
        parent::copy_to_elgg($elgg_entity);
        $elgg_entity->set("task_type", (string)$this->task_type);
        $elgg_entity->set("start", (int)$this->start);
        $elgg_entity->set("end", (int)$this->end);
    }

    protected function save(){
        parent::save();
        static::set_storyboards($this->id, $this->storyboard_array);
        static::set_videos($this->id, $this->video_array);
        static::set_files($this->id, $this->file_array);
        return $this->id;
    }

    /**
     * Get the Activity Id in which a Task is contained in.
     *
     * @param int $task_id Id of the Task to get Activity from.
     *
     * @return int Returns an the Activity Id for the Task.
     */
    static function get_activity($task_id){
        $activity = UBCollection::get_items($task_id, ClipitActivity::REL_ACTIVITY_TASK, true);
        return array_pop($activity);
    }

    // STORYBOARDS
    static function add_storyboards($id, $storyboard_array){
        return UBCollection::add_items($id, $storyboard_array, ClipitTask::REL_TASK_STORYBOARD);
    }

    static function set_storyboards($id, $storyboard_array){
        return UBCollection::set_items($id, $storyboard_array, ClipitTask::REL_TASK_STORYBOARD);
    }

    static function remove_storyboards($id, $storyboard_array){
        return UBCollection::remove_items($id, $storyboard_array, ClipitTask::REL_TASK_STORYBOARD);
    }

    static function get_storyboards($id){
        return UBCollection::get_items($id, ClipitTask::REL_TASK_STORYBOARD);
    }

    // VIDEOS
    static function add_videos($id, $video_array){
        return UBCollection::add_items($id, $video_array, ClipitTask::REL_TASK_VIDEO);
    }

    static function set_videos($id, $video_array){
        return UBCollection::set_items($id, $video_array, ClipitTask::REL_TASK_VIDEO);
    }

    static function remove_videos($id, $video_array){
        return UBCollection::remove_items($id, $video_array, ClipitTask::REL_TASK_VIDEO);
    }

    static function get_videos($id){
        return UBCollection::get_items($id, ClipitTask::REL_TASK_VIDEO);
    }

    // FILES
    static function add_files($id, $file_array){
        return UBCollection::add_items($id, $file_array, ClipitTask::REL_TASK_FILE);
    }

    static function set_files($id, $file_array){
        return UBCollection::set_items($id, $file_array, ClipitTask::REL_TASK_FILE);
    }

    static function remove_files($id, $file_array){
        return UBCollection::remove_items($id, $file_array, ClipitTask::REL_TASK_FILE);
    }

    static function get_files($id){
        return UBCollection::get_items($id, ClipitTask::REL_TASK_FILE);
    }
} 
